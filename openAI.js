const OpenAI = require('openai');
const banco = require("./db");
const readlineSync = require("readline-sync");
const colors = require("colors");

const {
    processarProduto,
    findByNameCategoria,
    findByNameCategoriaProduto,
    getProducName,
    setupconfiguracao,
    getCategoria,
    getCoreTamanhos,
    findByProducts,
    getProducts,
} = require('./produtoNuvem');

const nuvemshop = require("nuvemshop");
const venom = require('venom-bot');


let outputString = "";

const APP_ID = '11027';
const APP_SECRET = 'ecf9db5a12d93d2f545d06f6ba3fe08c4c90f9db';
const STORE_ID = '4511426';

nuvemshop.config({
    store_id: STORE_ID,
    access_token: APP_SECRET,
    user_agent: APP_ID
});



  const category = async () => {
    try{
        const category = await nuvemshop.listCategories();

        category.forEach(categoria => {
            categoria.name.pt = `*${categoria.name.pt}*`;
          });
        return category;

      }catch(error) {
        console.error("Erro ao gerar resposta:", error);
        return "Erro ao gerar resposta.";
      }
  }

  const setup = async () => {
    try{
         await setupconfiguracao();  
   }catch(error) {
    console.error("Error ao fazer configura√ß√£o: "+ error)
 
}
}

setup().then((result) => {
    main();
});


getCoreTamanhos();
const openai = new OpenAI({
    apiKey: process.env.APIKEY_OPENAI, // This is the default and can be omitted
  });
  

  const userModel  = `
     *Informa√ß√µes do Chatbot*
      Voc√™ √© o Gael, o assistente virtual da Faixinhas Moda Infantil! Estou aqui para ajud√°-lo a encontrar os melhores produtos para os pequenos. Se precisar de alguma coisa, √© s√≥ me chamar! üòäüëïüëü
      Seja educado, paciente e responda de forma clara e objetiva.
      Ofere√ßa ajuda e sugest√µes de produtos.
      Seja transparente sobre as formas de pagamento e entrega.
      precisa responder meus cliente de forma coloquial para que n√†o descubra que esta falando com chatbot.
      Use emojis para deixar suas respostas mais divertidas e engajadoras.
    
      üìç Endere√ßo da loja f√≠sica: Rua da Bela Vista, 71 - Engenho Novo - RJ
      Telefone para contato: 21 98181-6853
    
      *Informa√ß√µes da Loja*
      üëï Tamanhos de roupa: 2, 4, 6, 8 e 10 anos.
      ü©≥ Tamanhos de chinelos: 18 ao 33.
      üõí Link da nossa loja virtual: (https://faixinhasmoda.com.br/)
      üí≥ Formas de pagamento: PIX, CART√ÉO DE CR√âDITO e Dinheiro (parcelamento com juros).
      üöö Formas de entrega: Correio (para todo Brasil), Motoboy (apenas Rio de Janeiro) e Uber Moto (solicitado pelo cliente).
      Frete: Por conta do Cliente. 
      üöõ Frete: Por conta do Cliente. 
      Correio: Enviamos para todo Brasil. 
      ‚ÑπÔ∏è Observa√ß√µes: Chinelos nos tamanhos 18 ao 24 s√£o com el√°stico. N√£o realizamos trocas de pe√ßas brancas ou claras.
      üìß Status do pedido: Verifique sua caixa de e-mail cadastrada para receber atualiza√ß√µes sobre o seu pedido.
      üì∏ Solicita√ß√£o de fotos: Se precisar, posso enviar link da foto dos produtos dispon√≠veis em estoque.

      // Instru√ß√µes que voce deve seguir
      Lembre-se de responder apenas sobre os produtos em estoque e sempre direcionar o cliente para finalizar a compra pelo site. No site, o cliente pode calcular o frete e escolher a forma de pagamento. Em caso de d√∫vidas, estou √† disposi√ß√£o para ajudar! üòäüåü
      caso seja uber moto no site tem escolhe retirada na loja que assim verificamos a entrega. 
     
      Para garantir o ajuste perfeito do seu chinelo, siga estas simples instru√ß√µes de medi√ß√£o:

    Em uma folha de papel em branco, coloque-se em p√© com os calcanhares firmemente apoiados no ch√£o.
    Com um l√°pis ou caneta, desenhe o contorno dos seus p√©s. Certifique-se de manter o l√°pis na vertical para obter medidas precisas.
    Me√ßa a dist√¢ncia entre os pontos mais extremos do contorno do p√©. Isso pode ser feito com uma r√©gua ou fita m√©trica.    
    Use a tabela de tamanhos fornecida para comparar a medida obtida com os tamanhos dispon√≠veis da Rakka. Escolha o tamanho que corresponda mais de perto √† sua medida.
    Esta simples t√©cnica de medi√ß√£o garantir√° que voc√™ encontre o tamanho perfeito para desfrutar do conforto e estilo excepcionais da Rakka. Se precisar de assist√™ncia adicional, nossa equipe de atendimento ao cliente est√° √† disposi√ß√£o para ajudar.
    `;

    let messageClient = 
    `
      Produtos dispon√≠veis e catalogo
        ${outputString}
        `;

async function main() {
    console.log(colors.bold.green("estou apenas testando"))

    const numb = "21993732113"

    while(true) {
        const userInput = readlineSync.question(colors.yellow('Eu: '));

        try {
            if(userInput.toLocaleLowerCase() === 'sair'){
                return
            }

            const userCadastrado = banco.db.find(numero => numero.num === numb)

        if(!userCadastrado){
            banco.db.push({num: numb, historico: [] })
        }

        const historico = banco.db.find(numero => numero.num === numb)

        historico.historico.push("user: "+ userInput)
        
        // if (getTamanhos(userInput, historico.historico).length > 0 ) {
        //     let result = ""
        //     let prompt = `Identifique a inten√ß√£o do cliente com base na √∫ltimas mensagem enviada: : ${userInput}.`;
            
        //     const response = await generateResponse(prompt, historico);

        //     if(response) {
        //     historico.historico.push("assistant: "+ response)
        //     let list = getTamanhos(response, historico.historico)

        //     let prompt = `Melhore visualiza√ß√£o desse usuario no whataspp : ${list}.`;
            
        //     const response2 = await generateResponse(prompt, historico);
           
        //     list.forEach((value) => {
        //         result += findByProducts(value.product_id, value)
        //     })
        //         console.log(colors.green("assistant: ") + response2);
        //     }
          

        // }else if(contemSinonimoCatalogo(userInput)) { 
        //     category().then(async (results) => {
        //         const listaCategorias = results.map(categoria => categoria.name.pt).join(', ');
        //         const text = `üåü Que legal que voc√™ est√° interessado em conferir nossos produtos! Para come√ßar, escolha a categoria que mais lhe interessa.\nAs categorias dispon√≠veis s√£o: ${listaCategorias} `
        //         historico.historico.push("assistant: "+ text)
        //         console.log(colors.green("assistant: ") + text)
        //     })
        // } else {
            // const findByCat = await findByNameCategoria(userInput);
            // const termProduto = await getProducName(userInput)



            // if(findByCat) {
            //  findByNameCategoriaProduto(findByCat).then(async (results) => {
            //     const treinamento = `
            //     üîç Voc√™ gostaria de produtos relacionado a "${findByCat}"
            //         Melehore a presenta√ß√£o dos Produtos dispon√≠veis abaixo para que mostre os produtos para usario no whastapp.
            //         ${results}
            //     `
            //     const response = await generateResponse(treinamento, historico);

            //     if(response) {
            //     historico.historico.push("assistant: "+ response)
            //     //  await client.sendText(message.from, response);
            //     console.log(colors.green("assistant: ") + response)
            //     }
            //  })

            // }else if(termProduto) {
            //     const treinamento = `üëã Ol√°! Abaixo est√£o os produtos dispon√≠veis para voc√™ conferir:\n ${termProduto}`
            //     historico.historico.push("assistant: "+ treinamento)
            //     // await client.sendText(message.from, treinamento);
            //     console.log(colors.green("assistant: ") + treinamento)
            //     console.log(colors.red("estou no termo"))
                
            // } else {
                const response = await generateResponse(userInput, historico);
                // Enviar a resposta de volta ao remetente
                if(response) {
                    historico.historico.push("assistant: "+ response)
                    // await client.sendText(message.from, response);
                    console.log(colors.green("assistant: ") + response)
                }
            // }


            // let prompt = `Identifique a inten√ß√£o do cliente com base na √∫ltimas mensagem enviada: : ${userInput}. Depois me informas as palavras chave`;
            // const response = await generateResponse(prompt, historico);
            // console.error(colors.red("Inten√ß√£o do usuario: "+ response))

        // }
            
        } catch (error) {
            console.error(colors.red(error))
        }
    }
}

//   venom
//   .create({
//     session: 'ChatGTP-Bot',
//   })
//   .then((client) => start(client))
//   .catch((error) => {
//     console.error("Erro ao iniciar o cliente Venom:", error);
//   });

function start(client) {
   
  client.onMessage(async (message) => {

    try {
      // Verificar se a mensagem n√£o est√° vazia
      if (message && message.body && message.body.trim() === '') {
        console.log("A mensagem recebida est√° vazia. Ignorando...");
        return;
      }
      //TODO: Depois remover esse comentario 
      // if (message.type === 'chat' && message.from != "status@broadcast")  {
      //   console.log('Mensagem do from:', message.from);
      //   // L√≥gica para lidar com a mensagem do cliente aqui
      //   console.log('Mensagem do cliente:', message.body);
      // }else {
      //   console.log('Mensagem do from:', message.from);
      // }


      // Verificar se a mensagem √© de um remetente espec√≠fico
      if (message.from === "5521993732113@c.us" || message.from === "5521966476772@c.us") {
        const userCadastrado = banco.db.find(numero => numero.num === message.from)

        if(!userCadastrado){
            banco.db.push({num: message.from, historico: [] })
        }else{
            
        }

        const historico = banco.db.find(numero => numero.num === message.from)

        historico.historico.push("user: "+ message.body)
        
        if (getTamanhos(message.body, historico).length > 0 ) {
            let list = getTamanhos(message.body)
            let result = ""
            list.forEach((value) => {
                result += findByProducts(value.product_id, value)
            })

            let prompt = `Ol√°! Aqui est√£o algumas op√ß√µes dispon√≠veis: ${result} \n\n que usuario perquntou sempre verifiquei historico de mensagem para ver cliente esta escolhendo o produtos. Mensagem do usuario: ${message.body}. Lembre voc√™ eo robo de whatsapp enviei inform√£o como as pessoal entende no whatsapp`;

            
            const response = await generateResponse(prompt, historico);

            if(response) {
                
            historico.historico.push("assistant: "+ response)
             await client.sendText(message.from, response);
            }
          

        }else if(contemSinonimoCatalogo(message.body)) { 
            category().then(async (results) => {
                const listaCategorias = results.map(categoria => categoria.name.pt).join(', ');
                const text = `üåü Que legal que voc√™ est√° interessado em conferir nossos produtos! Para come√ßar, escolha a categoria que mais lhe interessa.\nAs categorias dispon√≠veis s√£o: ${listaCategorias} `
                historico.historico.push("assistant: "+ text)
                await client.sendText(message.from, text);
            })
        } else {
            const findByCat = await findByNameCategoria(message.body);
            const termProduto = await getProducName(message.body)

            if(findByCat) {
             findByNameCategoriaProduto(findByCat).then(async (results) => {
                const treinamento = `
                üîç Voc√™ gostaria de produtos relacionado a "${findByCat}"
                    Melehore a presenta√ß√£o dos Produtos dispon√≠veis abaixo para que mostre os produtos para usario no whastapp.
                    ${results}
                `
                const response = await generateResponse(treinamento, historico);

                if(response) {
                historico.historico.push("assistant: "+ response)
                 await client.sendText(message.from, response);
                }
             })

            }else if(termProduto) {
                const treinamento = `üëã Ol√°! Abaixo est√£o os produtos dispon√≠veis para voc√™ conferir:\n ${termProduto}`
                historico.historico.push("assistant: "+ treinamento)
                await client.sendText(message.from, treinamento);
            } else {
                const response = await generateResponse(message.body, historico);
                // Enviar a resposta de volta ao remetente
                if(response) {
                    historico.historico.push("assistant: "+ response)
                    await client.sendText(message.from, response);
                }
            }
        }
        console.log(historico.historico)
      }
    } catch (error) {
      console.error("Erro ao processar a mensagem:", error);
    }
  });
}

function getTamanhos(str) {
    let result = []
    console.log(colors.blue("STR: "+ str))
    const strNormalizada = str.normalize('NFD').replace(/[\u0300-\u036f]/g, "").toLowerCase();

    const listTamanhos = getCoreTamanhos();

    // Normaliza a string para remover acentos e converte para min√∫sculas
    const strSemAcentos = removerAcentos(str.toLowerCase());
    const palavras = strSemAcentos.split(" ");


    for (const palavra of palavras) {
        for (const tamanho of listTamanhos) {
            tamanho.values.forEach((value) => {
                const newValue = removerAcentos(value.pt.toLowerCase());
                if (palavra == newValue && tamanho.stock > 0) {
                    result.push(tamanho)
                } else{
                    let barras = newValue.split("/");
               
                    if (barras) {
                        barras.forEach((barra) => {
                        if (barra == palavra && tamanho.stock > 0) {
                                result.push(tamanho)
                            }
                        })
    
                    }
                }
            })
        }
    }
    return result;
}

function contemSinonimoCatalogo(str) {
    // Lista de sin√¥nimos da palavra "cat√°logo"
    const strNormalizada = str.normalize('NFD').replace(/[\u0300-\u036f]/g, "").toLowerCase();

    const sinonimosCatalogo = [
        'lista de produtos',
        'inventario',
        'repertorio',
        'colecao',
        'portfolio',
        'assortimento',
        'catalogo de produtos',
        'catalogo digital',
        'catalogo online',
        'catalogo de servicos',
        'estoque',
        'acervo',
        'amostra',
        'mostruario',
        'exibicao',
        'rol',
        'rol de produtos',
        'registro de produtos',
        'relacao de produtos',
        'catalogo de mercadorias',
        'catalogo de itens',
        'catalogo',
        'tem catalogo',
        'gostaria de ver o catalogo',
];

    // Normaliza a string para remover acentos e converte para min√∫sculas
    const strSemAcentos = removerAcentos(str.toLowerCase());

    // Verifica se a string normalizada cont√©m algum dos sin√¥nimos
    for (const sinonimo of sinonimosCatalogo) {
        if (strSemAcentos.includes(removerAcentos(sinonimo))) {
            return true; // Retorna true se encontrar algum sin√¥nimo
        }
    }
    return false; // Retorna false se n√£o encontrar nenhum sin√¥nimo
}


function removerAcentos(str) {
    return str.normalize('NFD').replace(/[\u0300-\u036f]/g, "");
}
async function generateResponse(message, historico) {
    try {
        const runner = openai.beta.chat.completions
        .runTools({
          model: 'gpt-3.5-turbo',
          messages: [
            {role: "assistant", content: userModel},
            {role: "assistant", content: "Historico de conversas: "+ historico.historico},
            { role: 'user', content: message },
        ],
          tools: [
            {
                type: 'function',
                function: {
                    function: searchProducts,
                    parameters: {
                    type: 'object',
                    properties: {
                        query: { type: 'string' },
                    },
                    },
                },
            }
          ],
        })
        .on('message', (message) =>
        
        console.log("message: " +JSON.stringify(message)));
    
      const finalContent = await runner.finalContent();

      historico.historico.push("assistant: "+ finalContent)
      console.log('Final content:', finalContent);
    } catch (error) {
        console.error("Erro ao gerar resposta:", error);
        return "Erro ao gerar resposta.";
      }
    }
    
    async function getCurrentLocation() {
        console.log(colors.yellow("Buscando dados..."))
      return 'Rio de janeiro'; // Simulate lookup
    }
    
    async function getWeather(args) {
      const { location } = args;
      // ‚Ä¶ do lookup ‚Ä¶
      const temperature = 25; // Exemplo de temperatura
      const precipitation = 'Sunny'; // Exemplo de precipita√ß√£o
        console.log("fui chamado")
        console.log(colors.red("Dados: "+ JSON.stringify()))
      return { temperature, precipitation };
    }
   
    const productsDatabase = {
        'camisa': ['Camisa Azul', 'Camisa Vermelha'],
        'cal√ßa': ['Cal√ßa Jeans', 'Cal√ßa Social'],
      };
      
      // Fun√ß√£o personalizada que pesquisa produtos com base na pergunta do usu√°rio
      async function searchProducts(args) {
        const { query } = JSON.parse(args);
        console.log(colors.red("Query: "+ query))
        const termProduto = await getProducts()
        let list = getTamanhos(query)
            let result = ""
            list.forEach((value) => {
                result += findByProducts(value.product_id, value)
            })
        // Simula√ß√£o de busca de produtos no banco de dados
        if (termProduto.length === 0) {
          return `N√£o foram encontrados produtos para a consulta "${query}".`;
        } else {
          return `Produtos encontrados para "${termProduto}": ${termProduto.join(', ')}.`;
        }
      }